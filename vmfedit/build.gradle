import java.text.SimpleDateFormat


plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'org.beryx.jlink' version '2.25.0'
    id 'com.github.node-gradle.node' version '3.3.0'

    id 'com.github.hierynomus.license' version '0.16.1'
    id 'maven-publish'
    id 'net.nemerosa.versioning' version '3.0.0'
    id 'com.github.ben-manes.versions' version '0.44.0'
}


ext.commonProps = new Properties()
file(new File(projectDir.parentFile,"config/common.properties")).withInputStream { commonProps.load(it) }

apply plugin: 'java-library'
apply from: 'gradle/publishing.gradle'

version = "${project.commonProps.get('publication.version')}"

// installer version (used for jlink/jpackge)
// parse version with three '.' separated numbers from full version string
def installerVersionList = version.tokenize('.')
def majorVersion = installerVersionList[0]
def minorVersion = installerVersionList[1]
// parse leading integer from patch version string (remove the rest)
def patchVersion = ((Number)java.text.NumberFormat.getInstance().parse(installerVersionList[2])).intValue()

def installerVersionStr = "${majorVersion}.${minorVersion}.${patchVersion}"
def appName = "VMFEdit"

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.8.2'
}

sourceCompatibility = '21'
targetCompatibility = '21'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

wrapper {
    gradleVersion = '8.14.2'
}

application {
    mainModule = 'eu.mihosoft.vmf.vmfedit'
    mainClass = 'eu.mihosoft.vmf.vmfedit.JsonEditorApplication'
}

javafx {
    version = '23.0.1'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.web']
}

dependencies {
    implementation('org.controlsfx:controlsfx:11.1.1')

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")

    // add jackson dependencies, use jackson as specified in the common.properties file
    implementation "com.fasterxml.jackson.core:jackson-core:${commonProps.get('deps.jackson.version')}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${commonProps.get('deps.jackson.version')}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${commonProps.get('deps.jackson.version')}"
}

test {
    useJUnitPlatform()
}

ext.os = org.gradle.internal.os.OperatingSystem.current()
jlink {
    version = installerVersionStr
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', "--compress=zip-6", '--no-header-files', '--no-man-pages']
    launcher {
        name = appName
    }
    jpackage {
        if(os.windows) {
            installerType = 'msi'
            installerOptions = ['--win-per-user-install', '--win-menu']
        }
    }
}



jlinkZip {
    group = 'distribution'
}

node {
    version = '16.13.1'
    download = true
}

// plot node installation directory
println "Node.js installation directory: ${node.nodeModulesDir.asFile.get()}"

task installJsonEditor(type: NpmTask) {
    args = ['install', '@json-editor/json-editor@2.15.2']
}

task copyJsonEditorToResources(type: Copy) {
    from 'node_modules/@json-editor/json-editor/dist'
//    into 'src/main/resources/json-editor'
    into 'src/main/resources/eu/mihosoft/vmf/vmfedit/json-editor'
    include '**/*'
}

task installFontAwesome(type: NpmTask) {
    args = ['install', '@fortawesome/fontawesome-free@5.15.4']
}

task copyFontAwesomeToResources(type: Copy) {
    from 'node_modules/@fortawesome/fontawesome-free/'
    into 'src/main/resources/eu/mihosoft/vmf/vmfedit/fontawesome-free'
    include '**/*'
}

task installBootStrap(type: NpmTask) {
    args = ['install', 'bootstrap@3.4.1']
}

task copyBootStrapToResources(type: Copy) {
    from 'node_modules/bootstrap/dist'
    into 'src/main/resources/eu/mihosoft/vmf/vmfedit/bootstrap'
    include '**/*'
}

// install spectre
task installSpectre(type: NpmTask) {
    args = ['install', 'spectre.css@0.5.9']
}

task copySpectreToResources(type: Copy) {
    from 'node_modules/spectre.css/dist'
    into 'src/main/resources/eu/mihosoft/vmf/vmfedit/spectre'
    include '**/*'
}

task installJSON5(type: NpmTask) {
    args = ['install', 'json5@2.2.3']
}

task copyJSON5ToResources(type: Copy) {
    from 'node_modules/json5/dist'
    into 'src/main/resources/eu/mihosoft/vmf/vmfedit/json5'
    include '**/*'
}

task installACEEditor(type: NpmTask) {
    args = ['install', 'ace-builds@1.37.5']
}

task copyACEEditorToResources(type: Copy) {
    from 'node_modules/ace-builds/src-min-noconflict'
    into 'src/main/resources/eu/mihosoft/vmf/vmfedit/ace-builds'
    include '**/*'
}

copyJsonEditorToResources.dependsOn installJsonEditor
processResources.dependsOn copyJsonEditorToResources

copyJSON5ToResources.dependsOn installJSON5
processResources.dependsOn copyJSON5ToResources

copyFontAwesomeToResources.dependsOn installFontAwesome
processResources.dependsOn copyFontAwesomeToResources

copyBootStrapToResources.dependsOn installBootStrap
processResources.dependsOn copyBootStrapToResources

copySpectreToResources.dependsOn installSpectre
processResources.dependsOn copySpectreToResources

copyACEEditorToResources.dependsOn installACEEditor
processResources.dependsOn copyACEEditorToResources



jar {
    manifest {
        attributes('Automatic-Module-Name': 'eu.mihosoft.vmf.vmfedit')
    }

    // // add velocity legacy to jar file
    // from {
    //     configurations.legacyVelocity.collect { it.isDirectory() ? it : zipTree(it) }
    // }
}

license {
    header = rootProject.file('core/config/HEADER')
    strictCheck = true
    ignoreFailures = true
    mapping {
        java   = 'SLASHSTAR_STYLE'
        groovy = 'SLASHSTAR_STYLE'
        fxml   = 'XML_STYLE'
    }

    ext.yearCurrent  = new SimpleDateFormat("yyyy").format(new Date())
    ext.yearSince1   = '2017'
    ext.author1 = 'Michael Hoffer <info@michaelhoffer.de>'
    ext.yearSince2   = '2017'
    ext.author2 = 'Goethe Center for Scientific Computing, University Frankfurt'

    exclude '**/*.svg'
}

