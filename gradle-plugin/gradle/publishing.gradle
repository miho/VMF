// -----------------------------------------------------------------------------
// Collect publishing information
// -----------------------------------------------------------------------------
ext.publishing = [:]
ext.publishing.bintray = [:]

ext.publishing.pomName =  ext.publishing.artifactId

apply from: "gradle/project-info.gradle"
apply plugin: 'signing'

// -----------------------------------------------------------------------------
// Performs publishing
// -----------------------------------------------------------------------------

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier  = 'javadoc'
    from javadoc.destinationDir
}

// create one jar for the source files
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier  = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

Date buildTimeAndDate = new Date()
ext {
    buildDate = new java.text.SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new java.text.SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
}

jar {
    manifest {
        attributes(
          'Built-By': System.properties['user.name'],
          'Created-By': System.properties['java.version'] + " (" + System.properties['java.vendor'] + " " + System.properties['java.vm.version'] + ")",
          'Build-Date': project.buildDate,
          'Build-Time': project.buildTime,
          'Build-Revision': versioning.info.commit,
          'Specification-Title': project.name,
          'Specification-Version': project.version,
          'Implementation-Title': project.name,
          'Implementation-Version': project.version
        )
    }
}


def pomConfig = {
    name ext.publishing.pomName
    description ext.publishing.desc
    url ext.publishing.websiteUrl
    inceptionYear ext.publishing.inceptionYear
    licenses {
        license([:]) {
            name ext.publishing.license
            url ext.publishing.licenseUrl
            distribution 'repo'
        }
    }
    scm {
        url ext.publishing.vcsUrl
        connection ext.publishing.vcsUrl
        developerConnection ext.publishing.vcsUrl
    }
    developers {
        developer {
            id ext.publishing.developerNameAlias
            name ext.publishing.developerName
        }
    }
}



publishing {

    repositories {
        // --------------------------------------------------------------------------------
        // Destination Repository 'GitHubPackages'
        // -> call task 'publishMavenJavaPublicationToGitHubPackagesRepository' to publish
        // --------------------------------------------------------------------------------
        maven {
            name = "GitHubPackages"
            // see https://levelup.gitconnected.com/publish-a-maven-package-to-github-with-gradle-fabc6de24d6
            // Replace OWNER and REPOSITORY with your GitHub username/repository
            // (must be both lowercase according to the documenations)
            // url = uri("https://maven.pkg.github.com/OWNER/REPOSITORY")
            url = uri("https://maven.pkg.github.com/miho/vmf")
            credentials {
                // Make sure to generate a token with write-packages and read-packages permission:
                // https://github.com/settings/tokens/new
                // You can either store the username and token in
                //   ~/.gradle/gradle.properties (use the gpr.user and gpr.key keys)
                // Or you can store them as environment variables e.g. in ~/.bash_profile or ~/.zsh
                // depending on your shell (GITHUB_USERNAME and GITHUB_TOKEN keys)
                // Or you pass them via CLI: gradle publish -Pgpr.user=username -Pgpr.key=token
                // See at EOF for examples on how to store the credentials
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }

        // --------------------------------------------------------------------------------
        // Destination Repository 'OSSRH'
        // telling gradle to publish artifact to local directory
        // -> call task 'publishMavenJavaPublicationToOSSRHRepository' to publish
        // -> go to https://oss.sonatype.org/#stagingRepositories, click 'close', drink coffee and then click 'release'
        //    if closing was successful
        // --------------------------------------------------------------------------------
        maven {
            name = "OSSRH"
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username = project.findProperty("oss.user") ?: System.getenv("OSS_USERNAME")
                password = project.findProperty("oss.pwd") ?: System.getenv("OSS_PWD")
            }
        }

        // --------------------------------------------------------------------------------
        // Destination Repository 'BuildDir'
        // telling gradle to publish artifact to local directory
        // -> call task 'publishMavenJavaPublicationToBuildDirRepository' to publish
        // --------------------------------------------------------------------------------
        maven {
            name = "BuildDir"
            url "file:/${buildDir}/artifacts"
        }
    }


    publications {
        mavenJava(MavenPublication) {
            groupId publishing.groupId
            artifactId publishing.artifactId
            version publishing.versionId
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                def root = asNode()
                root.appendNode 'description', publishing.desc
                root.children().last() + pomConfig
            }
        }
    }
}

// TODO for some reason 'sign publications.publishing' is null, we search for publications manually
afterEvaluate {
    // find publications
    def myPublications = [];
    tasks.withType(PublishToMavenRepository) { task ->
        if(!myPublications.contains(task.publication))
            myPublications.add(task.publication)
    }

    signing {
        myPublications.each {
            sign it
        }
    }
}

