#*
 * Copyright 2017-2023 Michael Hoffer <info@michaelhoffer.de>. All rights reserved.
 * Copyright 2017-2023 Goethe Center for Scientific Computing, University Frankfurt. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * If you use this software for scientific research then please cite the following publication(s):
 *
 * M. Hoffer, C. Poliwoda, & G. Wittum. (2013). Visual reflection library:
 * a framework for declarative GUI programming on the Java platform.
 * Computing and Visualization in Science, 2013, 16(4),
 * 181â€“192. http://doi.org/10.1007/s00791-014-0230-y
 *#
#if($prop.propType == "COLLECTION" && !$prop.contained && $prop.crossRefProperty)##      COLLECTION PROP
    // this property holds a collection of objects which are (cross-)referenced as
    // indicated by the @Refers annotation (see model type ${type.typeName})

    // perform lazy initialization
    if(this.__vmf_prop_$prop.name==null) {
        this.__vmf_prop_$prop.name = ${VCOLL_PKG}.VList.newInstance(__vmf_get_prop_${prop.name}__vmf_RawList());

        this.__vmf_prop_${prop.name}.addChangeListener( (evt) -> {
            evt.added().elements().forEach( (e) -> {

                if(e==null || ${VMFPKG_INT}.ChangeInternal.CHANGE_TYPE_CROSS_REF.equals(evt.eventInfo())) return;

#if(${prop.referenceInfo.opposite.propType} == "COLLECTION" )
                // opposite is collection. we just remove the element from its opposite collection
                String eventInfo = ((${prop.parent.packageName}.impl.__VMF_TYPE_${prop.genericTypeName}Impl)e).get${prop.referenceInfo.opposite.nameWithUpperCase}().getEventInfo();
                ((${prop.parent.packageName}.impl.__VMF_TYPE_${prop.genericTypeName}Impl)e).get${prop.referenceInfo.opposite.nameWithUpperCase}().setEventInfo(${VMFPKG_INT}.ChangeInternal.CHANGE_TYPE_CROSS_REF);
                ((${prop.parent.packageName}.impl.__VMF_TYPE_${prop.genericTypeName}Impl)e).get${prop.referenceInfo.opposite.nameWithUpperCase}().add(this);
                ((${prop.parent.packageName}.impl.__VMF_TYPE_${prop.genericTypeName}Impl)e).get${prop.referenceInfo.opposite.nameWithUpperCase}().setEventInfo(eventInfo); 
#elseif(${prop.referenceInfo.opposite.propType} != "COLLECTION" )
                // the opposite is no collection
                // only look for duplicates if not triggered by cross-ref
                if (!java.util.Objects.equals(${VMFPKG_INT}.ChangeInternal.CHANGE_TYPE_CROSS_REF, this.__vmf_prop_${prop.name}.getEventInfo())) {
                    // we remove entry e if it is already referenced 
                    // to detect we don't directly count the number of elements (must be < 2)
                    // but first check whether the new opposite is equal to the previous one
                    // which indicates that e has been added already
                    if(this==((${prop.parent.packageName}.impl.__VMF_TYPE_${prop.genericTypeName}Impl)e).get${prop.referenceInfo.opposite.nameWithUpperCase}()) {
                        if(this.__vmf_prop_${prop.name}.stream().filter(el->el==e).count() > 1) this.__vmf_prop_${prop.name}.remove(e); // removed e since it has been already added
                    }
                }

                // remove reference to opposite and set 'this' as new opposite
#set($oppositeRefProp=${prop.referenceInfo.opposite})
                Object refOldVal = ((${prop.parent.packageName}.impl.__VMF_TYPE_${prop.genericTypeName}Impl)e).__vmf_get_prop_${oppositeRefProp.name}();
// TODO
//                if(refOldVal!=null) {
//                    ${oppositeRefProp.typeName} oldOpposite = (${oppositeRefProp.typeName})((${prop.parent.packageName}.impl.__VMF_TYPE_${prop.genericTypeName}Impl)refOldVal).__vmf_get_prop_${oppositeRefProp.name}();
//
//                    if(oldOpposite!=null) {
//                        oldOpposite.get${prop.nameWithUpperCase}().remove(e);
//                    }
//                }
                ((${prop.parent.packageName}.impl.__VMF_TYPE_${prop.genericTypeName}Impl)e).__vmf_set_prop_${oppositeRefProp.name}(this);
                ((${prop.parent.packageName}.impl.__VMF_TYPE_${prop.genericTypeName}Impl)e)._vmf_firePropertyChangeIfListenersArePresent("${oppositeRefProp.name}", refOldVal, this, ${VMFPKG_INT}.ChangeInternal.CHANGE_TYPE_CROSS_REF);
#end
                
            }); // end of evt.added()     

            evt.removed().elements().forEach( (e) -> {

                if(e==null || ${VMFPKG_INT}.ChangeInternal.CHANGE_TYPE_CROSS_REF.equals(evt.eventInfo())) return;

#if(${prop.referenceInfo.opposite.propType} == "COLLECTION" )
#set($oppositeRefProp=${prop.referenceInfo.opposite})  
                String eventInfo = ((${prop.parent.packageName}.impl.__VMF_TYPE_${prop.genericTypeName}Impl)e).get${prop.referenceInfo.opposite.nameWithUpperCase}().getEventInfo();
                ((${prop.parent.packageName}.impl.__VMF_TYPE_${prop.genericTypeName}Impl)e).get${prop.referenceInfo.opposite.nameWithUpperCase}().setEventInfo(${VMFPKG_INT}.ChangeInternal.CHANGE_TYPE_CROSS_REF);
                ((${prop.parent.packageName}.impl.__VMF_TYPE_${prop.genericTypeName}Impl)e).get${prop.referenceInfo.opposite.nameWithUpperCase}().remove(this);
                ((${prop.parent.packageName}.impl.__VMF_TYPE_${prop.genericTypeName}Impl)e).get${prop.referenceInfo.opposite.nameWithUpperCase}().setEventInfo(eventInfo); 
#elseif(${prop.referenceInfo.opposite.propType} != "COLLECTION" )
#set($oppositeRefProp=${prop.referenceInfo.opposite})
                Object refOldVal = ((${prop.parent.packageName}.impl.__VMF_TYPE_${prop.genericTypeName}Impl)e).__vmf_get_prop_${oppositeRefProp.name}();
                ((${prop.parent.packageName}.impl.__VMF_TYPE_${prop.genericTypeName}Impl)e).__vmf_set_prop_${oppositeRefProp.name}(null);   
                ((${prop.parent.packageName}.impl.__VMF_TYPE_${prop.genericTypeName}Impl)e)._vmf_firePropertyChangeIfListenersArePresent("${oppositeRefProp.name}", refOldVal, null, ${VMFPKG_INT}.ChangeInternal.CHANGE_TYPE_CROSS_REF);
#end
                
            }); // end of evt.removed()     
        }); // end of addChangeListener
             

    } // end of "lazy init" if(this.__vmf_prop_$prop.name==null)
    
    // return the collection
    return this.__vmf_prop_$prop.name;
#end##                                                                                    COLLECTION PROP