#*
 * Copyright 2017-2024 Michael Hoffer <info@michaelhoffer.de>. All rights reserved.
 * Copyright 2017-2019 Goethe Center for Scientific Computing, University Frankfurt. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * If you use this software for scientific research then please cite the following publication(s):
 *
 * M. Hoffer, C. Poliwoda, & G. Wittum. (2013). Visual reflection library:
 * a framework for declarative GUI programming on the Java platform.
 * Computing and Visualization in Science, 2013, 16(4),
 * 181â€“192. http://doi.org/10.1007/s00791-014-0230-y
 *#
#foreach( $prop in ${type.implementation.properties} )
#if(${prop.propType}=="COLLECTION")##  if   (prop is collection type)
#elseif(${prop.readOnly} == true)  ##  elif (prop is read-only)
public $prop.setterDeclaration { throw new RuntimeException("Cannot set read-only property'${prop.name}'."); }
#else                              ##  else (prop is writable property)

@Override
public $prop.setterDeclaration {

#parse("${VMF_TEMPLATE_PATH}impl/setter-no-collection-simple.vm")
#parse("${VMF_TEMPLATE_PATH}impl/setter-no-collection-container.vm")
#parse("${VMF_TEMPLATE_PATH}impl/setter-no-collection-contained.vm")
#parse("${VMF_TEMPLATE_PATH}impl/setter-no-collection-cross-reference.vm")

} // end setterDeclaration (setter method) : $prop.setterDeclaration     
#end##                                  end  (prop is writable property)
#end## end for-each property


@Override 
public void _vmf_unregisterFromContainers() {
   // --------------------------------------------------------------------------------
   // release container property from this
   // --------------------------------------------------------------------------------
   if(this._vmf_getContainer()!=null) {

      ${VMFPKG_INT}.VObjectInternalModifiable container = (${VMFPKG_INT}.VObjectInternalModifiable)this._vmf_getContainer();

      boolean found = false;

#foreach( $container in ${type.findAllTypesThatContainType()} )
      // ------------------------------------------------------------
      // unregistering from instances of containing type: $container.typeName
      // ------------------------------------------------------------

#foreach( $contained in ${container.implementation.properties} )
#if(${contained.containmentInfo.containmentType}=="CONTAINED" && (${contained.typeName} == ${type.fullTypeName} || ${contained.genericTypeName} == ${type.typeName}))
      // -- > prop: ${contained.name}, type: ${contained.typeName}
      if(!found && container instanceof __VMF_TYPE_${container.typeName}Impl) {
        __VMF_TYPE_${container.typeName}Impl container_internal = (__VMF_TYPE_${container.typeName}Impl)container;
#if(${contained.propType}=="COLLECTION")## contained prop is collection
        String evtInfo = container_internal.get${contained.nameWithUpperCase}().getEventInfo();
        container_internal.get${contained.nameWithUpperCase}().setEventInfo(${VMFPKG_INT}.ChangeInternal.CHANGE_TYPE_CONTAINMENT);
        found = container_internal.get${contained.nameWithUpperCase}().remove(this);
        container_internal.get${contained.nameWithUpperCase}().setEventInfo(evtInfo);
#else##                                    contained prop is collection
        ${contained.typeName} oldValue = container_internal.__vmf_get_prop_${contained.name}();
        // if old value is this contained instance then unregister from the container
        if(oldValue == this) {
          container_internal.__vmf_set_prop_${contained.name}(null);
          container_internal._vmf_firePropertyChangeIfListenersArePresent("${contained.name}", oldValue, null, ${VMFPKG_INT}.ChangeInternal.CHANGE_TYPE_CONTAINMENT);
          found = true; // unregistered
        }
#end##                                     contained prop is collection
      } // if not already found and if container instance is of correct type

#end## contained and types match
#end## for each contained
#end## for each container with opposites
      // finally, set the container to 'null' and fire the corresponding event
      this._vmf_setContainer(null);
      this._vmf_firePropertyChangeIfListenersArePresent(this._vmf_getPropertyNames()[this._vmf_getContainerPropertyId()], container, null, ${VMFPKG_INT}.ChangeInternal.CHANGE_TYPE_CONTAINMENT);
    } // end if getContainer!=null
} // end _vmf_unregisterFromContainers

