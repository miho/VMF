#*
 * Copyright 2017-2023 Michael Hoffer <info@michaelhoffer.de>. All rights reserved.
 * Copyright 2017-2023 Goethe Center for Scientific Computing, University Frankfurt. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * If you use this software for scientific research then please cite the following publication(s):
 *
 * M. Hoffer, C. Poliwoda, & G. Wittum. (2013). Visual reflection library:
 * a framework for declarative GUI programming on the Java platform.
 * Computing and Visualization in Science, 2013, 16(4),
 * 181â€“192. http://doi.org/10.1007/s00791-014-0230-y
 *#
#if(${prop.propType} != "COLLECTION" && !${prop.container} && ${prop.contained} && !${prop.crossRefProperty})
  // ----------------------------------------
  // return early if identical value has been set
  // ----------------------------------------
  if (this.__vmf_prop_$prop.name == $prop.name) {
    return;
  }
  // ----------------------------------------

  // ----------------------------------------
  // unregister current value from previous container
  // ----------------------------------------
  if(this.__vmf_prop_${prop.name} != null) {
    ${VMFPKG_INT}.VObjectInternalModifiable value_internal = (${VMFPKG_INT}.VObjectInternalModifiable)this.__vmf_prop_${prop.name};
    value_internal._vmf_unregisterFromContainers();
  } // end if ${prop.name} != null      
  // ----------------------------------------
  // unregister new value from previous containers
  // ----------------------------------------
  if(${prop.name} != null) {
    ${VMFPKG_INT}.VObjectInternalModifiable value_internal = (${VMFPKG_INT}.VObjectInternalModifiable)${prop.name};
    value_internal._vmf_unregisterFromContainers();    
  }

  // ----------------------------------------
  // register with new container (container name: ${prop.containmentInfo.opposite.name})
  // ----------------------------------------
  if(${prop.name} != null) {
    ${VMFPKG_INT}.VObjectInternalModifiable value_internal = (${VMFPKG_INT}.VObjectInternalModifiable)${prop.name};
    ${VMFPKG}.VObject oldContainer = value_internal._vmf_getContainer(); 
    value_internal._vmf_setContainer(this);
#if(${prop.containmentInfo.opposite})## opposite
    value_internal._vmf_setContainerPropertyId(value_internal._vmf_getPropertyIdByName("${prop.containmentInfo.opposite.name}"));
    ((__VMF_TYPE_${prop.simpleTypeName}Impl)value_internal)._vmf_firePropertyChangeIfListenersArePresent("${prop.containmentInfo.opposite.name}", oldContainer, this, ${VMFPKG_INT}.ChangeInternal.CHANGE_TYPE_CONTAINMENT);
#else##                                      ## opposite
    ((__VMF_TYPE_${prop.simpleTypeName}Impl)value_internal)._vmf_firePropertyChangeIfListenersArePresent("__vmf_prop_unnamed_container", oldContainer, this, ${VMFPKG_INT}.ChangeInternal.CHANGE_TYPE_CONTAINMENT);
#end##                                       ## opposite
  }  
  // ----------------------------------------  

  // ----------------------------------------
  // set the new value
  // ----------------------------------------
  ${prop.typeName} oldValue = this.__vmf_prop_${prop.name};
  this.__vmf_prop_${prop.name} = ${prop.name};
  // ----------------------------------------

  // ----------------------------------------
  // fire property changed event
  // ----------------------------------------
  this._vmf_firePropertyChangeIfListenersArePresent("${prop.name}", oldValue, this.__vmf_prop_${prop.name});
  //this._vmf_firePropertyChangeIfListenersArePresent("${oppositeRefProp.name}", refOldVal, null, ${VMFPKG_INT}.ChangeInternal.CHANGE_TYPE_CROSS_REF);
  // ----------------------------------------
#end