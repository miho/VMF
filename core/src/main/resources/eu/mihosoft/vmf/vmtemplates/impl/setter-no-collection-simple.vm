#*
 * Copyright 2017-2024 Michael Hoffer <info@michaelhoffer.de>. All rights reserved.
 * Copyright 2017-2019 Goethe Center for Scientific Computing, University Frankfurt. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * If you use this software for scientific research then please cite the following publication(s):
 *
 * M. Hoffer, C. Poliwoda, & G. Wittum. (2013). Visual reflection library:
 * a framework for declarative GUI programming on the Java platform.
 * Computing and Visualization in Science, 2013, 16(4),
 * 181â€“192. http://doi.org/10.1007/s00791-014-0230-y
 *#
#if($prop.propType != "COLLECTION" && !$prop.container && !$prop.contained && !$prop.crossRefProperty)
  // this property holds a regular reference
  // -> neither a container nor contained nor cross-referenced

  // ----------------------------------------
  // return early if identical value has been set
  // ----------------------------------------
#if(
    (${prop.typeName}=="boolean")
  ||(${prop.typeName}=="byte")
  ||(${prop.typeName}=="char")
  ||(${prop.typeName}=="short")
  ||(${prop.typeName}=="int")
  ||(${prop.typeName}=="long")
  ||(${prop.typeName}=="float")
  ||(${prop.typeName}=="double")
)
  // check for value changes: primitive value (using '==')
  // type: ${prop.typeName}
  if (this.__vmf_prop_${prop.name} == ${prop.name}) {
    return;
  }
#else
  // check for value changes: regular object value (using equals)
  // type: ${prop.typeName}
  if ((this.__vmf_prop_${prop.name} == null)? ${prop.name} == null : this.__vmf_prop_${prop.name}.equals(${prop.name})) {
    return;
  }
#end  
  // ----------------------------------------

  // ----------------------------------------
  // set the new value
  // ----------------------------------------
  ${prop.typeName} oldValue = this.__vmf_prop_${prop.name};
  this.__vmf_prop_${prop.name} = ${prop.name};
  // ----------------------------------------

  // ----------------------------------------
  // fire property changed event
  // ----------------------------------------
  this._vmf_firePropertyChangeIfListenersArePresent("${prop.name}", oldValue, this.__vmf_prop_${prop.name});
  //this._vmf_firePropertyChangeIfListenersArePresent("${oppositeRefProp.name}", refOldVal, null, ${VMFPKG_INT}.ChangeInternal.CHANGE_TYPE_CROSS_REF);
  // ----------------------------------------
#end