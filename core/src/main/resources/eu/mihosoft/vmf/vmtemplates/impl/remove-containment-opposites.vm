#*
 * Copyright 2017-2023 Michael Hoffer <info@michaelhoffer.de>. All rights reserved.
 * Copyright 2017-2023 Goethe Center for Scientific Computing, University Frankfurt. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * If you use this software for scientific research then please cite the following publication(s):
 *
 * M. Hoffer, C. Poliwoda, & G. Wittum. (2013). Visual reflection library:
 * a framework for declarative GUI programming on the Java platform.
 * Computing and Visualization in Science, 2013, 16(4),
 * 181â€“192. http://doi.org/10.1007/s00791-014-0230-y
 *#
  
      // ----------------------------------------
      // -- for-loop p : findAllPropsThatContainType() <begin>
      // ----------------------------------------
      { // scope <begin>

      // cast to internal vobject which allows us to access its container
      ${VMFPKG_INT}.VObjectInternalModifiable valueInternal = 
        (${VMFPKG_INT}.VObjectInternalModifiable)$prop.name;

      // indicates whether we found the prev property that contain this value
      boolean done = false;
      
#foreach($pOfType in ${prop.type.findAllPropsThatContainType()})## // for-loop <begin>
      // PROP: ${pOfType.parent.typeName}.${pOfType.name}
#if(!${pOfType.equals(${prop})})##---- if (prop!=pOfType)
      if(!done && valueInternal._vmf_getContainer() instanceof ${pOfType.parent.typeName}) {
#else##--------------------------------## else (prop!=pOfType)  
      // -> prop is identical to this prop. Only remove if container instance 
      //    is different from 'this' reference
      if( !done
          && valueInternal._vmf_getContainer()!=this
          && valueInternal._vmf_getContainer() instanceof ${pOfType.parent.typeName}) {
#end##---------------------------------## end (prop!=pOfType)      
        ${pOfType.parent.typeName} container = (${pOfType.parent.typeName})valueInternal._vmf_getContainer();
        __VMF_TYPE_${pOfType.parent.typeName}Impl container_internal = (__VMF_TYPE_${pOfType.parent.typeName}Impl)container;
#if(${pOfType.propType}=="COLLECTION")##-- if    (is collection-type)
        container.get${pOfType.nameWithUpperCase}().remove(valueInternal);
#else##---------------------------------## else  (is collection-type)
        // container.set${pOfType.nameWithUpperCase}(null);
        Object oldValue_internal =  container_internal.__vmf_get_prop_${pOfType.name}();
        container_internal.__vmf_set_prop_${pOfType.name}(null);
        if(oldValue_internal!=null) {
            container_internal._vmf_firePropertyChangeIfListenersArePresent("${pOfType.name}", oldValue_internal, null);
        }
#end##----------------------------------## end   (is collection-type)
        // TODO 28.09.2019 maybe not allowed due to potential overlap // done = true;
      } // end if (${pOfType.parent.typeName}.${pOfType.name})
#end##------------------------------------------------------------ // for-loop <end>
      } // scope <end>
      // ----------------------------------------
      // -- for-loop p : findAllPropsThatContainType() <end>
      // ----------------------------------------

      // ----------------------------------------
      // -- for-loop p : findAllPropsThatContainTypeWithOpposite() <begin>
      // ----------------------------------------
      { // scope <begin>
      // indicates whether we found the prev property that contains this value
      boolean done = false;
      
#foreach($pOfType in ${prop.type.findAllPropsThatContainTypeWithOpposite()})## // for-loop <begin>
      // PROP: ${pOfType.parent.typeName}.${pOfType.name}
      // CONTAINER: ${prop.name}.get${pOfType.containmentInfo.opposite.nameWithUpperCase}()
#if(!${pOfType.equals(${prop})})##---- if (prop!=pOfType)
      if( !done
          && ${prop.name}.get${pOfType.containmentInfo.opposite.nameWithUpperCase}()!=null
          #if(${pOfType.propType}=="COLLECTION")#else&& ${prop.name}.get${pOfType.containmentInfo.opposite.nameWithUpperCase}().get${pOfType.nameWithUpperCase}()==${prop.name}#end) {
#else##--------------------------------## else (prop!=pOfType)  
      // -> prop is identical to this prop. Only remove if container instance 
      //    is different from 'this' reference
      if( !done
          && ${prop.name}.get${pOfType.containmentInfo.opposite.nameWithUpperCase}()!=null
          && ${prop.name}.get${pOfType.containmentInfo.opposite.nameWithUpperCase}()!=this) {
#end##---------------------------------## end (prop!=pOfType)      
        ${pOfType.parent.typeName} container = (__VMF_TYPE_${pOfType.parent.typeName}Impl)${prop.name}.get${pOfType.containmentInfo.opposite.nameWithUpperCase}();
        __VMF_TYPE_${pOfType.parent.typeName}Impl container_internal = (__VMF_TYPE_${pOfType.parent.typeName}Impl)container;
#if(${pOfType.propType}=="COLLECTION")##-- if    (is collection-type)
        container.get${pOfType.nameWithUpperCase}().remove($prop.name);
#else##---------------------------------## else  (is collection-type)
        // container.set${pOfType.nameWithUpperCase}(null);
        Object oldValue_internal =  container_internal.__vmf_get_prop_${pOfType.name}();
        container_internal.__vmf_set_prop_${pOfType.name}(null);
        if(oldValue_internal!=null) {
            container_internal._vmf_firePropertyChangeIfListenersArePresent("${pOfType.name}", oldValue_internal, null);
        }
#end##----------------------------------## end   (is collection-type)
        // TODO 28.09.2019 maybe not allowed due to potential overlap // done = true;
      } // end if (${pOfType.parent.typeName}.${pOfType.name})
#end##------------------------------------------------------------ // for-loop <end>
      } // scope <end>
      // ----------------------------------------
      // -- for-loop p : findAllPropsThatContainTypeWithOpposite() <end>
      // ----------------------------------------