#*
 * Copyright 2017-2019 Michael Hoffer <info@michaelhoffer.de>. All rights reserved.
 * Copyright 2017-2019 Goethe Center for Scientific Computing, University Frankfurt. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * If you use this software for scientific research then please cite the following publication(s):
 *
 * M. Hoffer, C. Poliwoda, & G. Wittum. (2013). Visual reflection library:
 * a framework for declarative GUI programming on the Java platform.
 * Computing and Visualization in Science, 2013, 16(4),
 * 181â€“192. http://doi.org/10.1007/s00791-014-0230-y
 *#
package ${packageName};

// vmf imports
#set($VMFPKG="${VMF_RUNTIME_API_PKG}.${VMF_CORE_PKG_EXT}")
#set($VMFPKG_INT="${VMF_RUNTIME_API_PKG}.${VMF_CORE_PKG_EXT}.internal")
// import ${VMF_RUNTIME_API_PKG}.${VMF_CORE_PKG_EXT}.*;
// import ${VMF_RUNTIME_API_PKG}.${VMF_CORE_PKG_EXT}.internal.*;


public interface ReadOnlySwitchFor${modelSwitchName}Model<T> {

  @SuppressWarnings("deprecation")
  default T doSwitch(${VMFPKG}.VObject o) {
    T result = null;
    switch(((${VMFPKG_INT}.VObjectInternal)o)._vmf_getTypeId()) {
#foreach($type in $model.types)
      #set($modifiableIdx = $foreach.index*2 + 0)
      #set($readOnlyIdx = $foreach.index*2 + 1)
      case $readOnlyIdx:
        // TODO check whether we can prevent lazy initialized properties from
        //      being initialized just for iterating the object graph
        result = case${type.readOnlyInterface.typeName}((${type.readOnlyInterface.typeName}) o);
        return result == null?defaultValue(o):result;
#end ## for-each type
      default:
        return defaultValue(o);
    }
  } // end doSwitch()

  /**
   * Default value that will be return if the matching case method returns {code null}.
   * @return default value
   */
  default T defaultValue(${VMFPKG}.VObject o) {
    return null;
  }

#foreach($type in $model.types)

  default T case${type.readOnlyInterface.typeName}(${type.readOnlyInterface.typeName} object) {return null;}
#end ## for-each type

}
