  
      // ----------------------------------------
      // -- for-loop p : findAllPropsThatContainType() <begin>
      // ----------------------------------------
      { // scope <begin>

      // cast to internal vobject which allows us to access its container
      ${VMFPKG_INT}.VObjectInternalModifiable valueInternal = 
        (${VMFPKG_INT}.VObjectInternalModifiable)$prop.name;

      // indicates whether we found the prev property that contain this value
      boolean done = false;
      
#foreach($pOfType in ${prop.type.findAllPropsThatContainType()})## // for-loop <begin>
      // PROP: ${pOfType.parent.typeName}.${pOfType.name}
#if(!${pOfType.equals(${prop})})##---- if (prop!=pOfType)
      if(!done && valueInternal._vmf_getContainer() instanceof ${pOfType.parent.typeName}) {
#else##--------------------------------## else (prop!=pOfType)  
      // -> prop is identical to this prop. Only remove if container instance 
      //    is different from 'this' reference
      if( !done
          && valueInternal._vmf_getContainer()!=this
          && valueInternal._vmf_getContainer() instanceof ${pOfType.parent.typeName}) {
#end##---------------------------------## end (prop!=pOfType)      
        ${pOfType.parent.typeName} container = (${pOfType.parent.typeName})valueInternal._vmf_getContainer();
#if(${pOfType.propType}=="COLLECTION")##-- if    (is collection-type)
        container.get${pOfType.nameWithUpperCase}().remove(valueInternal);
#else##---------------------------------## else  (is collection-type)
        container.set${pOfType.nameWithUpperCase}(null);
#end##----------------------------------## end   (is collection-type)
        // TODO 28.09.2019 maybe not allowed due to potential overlap // done = true;
      } // end if (${pOfType.parent.typeName}.${pOfType.name})
#end##------------------------------------------------------------ // for-loop <end>
      } // scope <end>
      // ----------------------------------------
      // -- for-loop p : findAllPropsThatContainType() <end>
      // ----------------------------------------

      // ----------------------------------------
      // -- for-loop p : findAllPropsThatContainTypeWithOpposite() <begin>
      // ----------------------------------------
      { // scope <begin>
      // indicates whether we found the prev property that contain this value
      boolean done = false;
      
#foreach($pOfType in ${prop.type.findAllPropsThatContainTypeWithOpposite()})## // for-loop <begin>
      // PROP: ${pOfType.parent.typeName}.${pOfType.name}
      // CONTAINER: ${prop.name}.get${pOfType.containmentInfo.opposite.nameWithUpperCase}()
#if(!${pOfType.equals(${prop})})##---- if (prop!=pOfType)
      if( !done
          && ${prop.name}.get${pOfType.containmentInfo.opposite.nameWithUpperCase}()!=null) {
#else##--------------------------------## else (prop!=pOfType)  
      // -> prop is identical to this prop. Only remove if container instance 
      //    is different from 'this' reference
      if( !done
          && ${prop.name}.get${pOfType.containmentInfo.opposite.nameWithUpperCase}()!=null
          && ${prop.name}.get${pOfType.containmentInfo.opposite.nameWithUpperCase}()!=this) {
#end##---------------------------------## end (prop!=pOfType)      
        ${pOfType.parent.typeName} container = ${prop.name}.get${pOfType.containmentInfo.opposite.nameWithUpperCase}();
#if(${pOfType.propType}=="COLLECTION")##-- if    (is collection-type)
        container.get${pOfType.nameWithUpperCase}().remove($prop.name);
#else##---------------------------------## else  (is collection-type)
        container.set${pOfType.nameWithUpperCase}(null);
#end##----------------------------------## end   (is collection-type)
        // TODO 28.09.2019 maybe not allowed due to potential overlap // done = true;
      } // end if (${pOfType.parent.typeName}.${pOfType.name})
#end##------------------------------------------------------------ // for-loop <end>
      } // scope <end>
      // ----------------------------------------
      // -- for-loop p : findAllPropsThatContainTypeWithOpposite() <end>
      // ----------------------------------------