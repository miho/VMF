#*
 * Copyright 2017-2019 Michael Hoffer <info@michaelhoffer.de>. All rights reserved.
 * Copyright 2017-2019 Goethe Center for Scientific Computing, University Frankfurt. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * If you use this software for scientific research then please cite the following publication(s):
 *
 * M. Hoffer, C. Poliwoda, & G. Wittum. (2013). Visual reflection library:
 * a framework for declarative GUI programming on the Java platform.
 * Computing and Visualization in Science, 2013, 16(4),
 * 181â€“192. http://doi.org/10.1007/s00791-014-0230-y
 *#
  // --------------------------- BEGIN CLONING -----------------------------
  /**
   * Package private copy constructor.
   * It creates a deep or shallow copy of the specified other object.
   * @param other other object
   * @param deepCopy defines whether to perform a deep copy
   */
  ${type.implementation.typeName} (
    ${type.implementation.typeName} other,
    boolean deepCopy, java.util.IdentityHashMap<Object,Object> identityMap
  ) {
    identityMap.put(other,this);

#foreach ($prop in $type.implementation.properties)
#if(!$prop.container)
#if($prop.propType=="COLLECTION")
    if(deepCopy) {
      if(other.__vmf_prop_${prop.name}!=null) {
#if($prop.genericType)
        // element type is a model type
        for($prop.genericType.typeName e : other.__vmf_prop_${prop.name}) {
          // TODO do a bulk operation instead
          ${VMFPKG_INT}.VObjectInternal eClone = (${VMFPKG_INT}.VObjectInternal)($prop.genericType.typeName)((VCloneableInternal)e)._vmf_deepCopy(identityMap);
          this.get${prop.nameWithUpperCase}().add(($prop.genericType.typeName)eClone);
        }
#else ## if prop genericType
        // element type is an external type (TODO implement cloning strategy)
        this.get${prop.nameWithUpperCase}().addAll(other.__vmf_prop_${prop.name});
#end ## if prop genericType
      } else {
        // nothing to copy
      }
    } else {
      this.__vmf_prop_$prop.name = other.__vmf_prop_$prop.name;
    }
#if($prop.contained)
    if(this.__vmf_prop_${prop.name}!=null && !deepCopy) {
      throw new RuntimeException("Cannot create shallow copy of containment properties. Use 'deepCopy()' instead.");
##       this.__vmf_prop_${prop.name}.forEach((e) -> {
##           #set($propertyToModifyValue = "e")
##           #set($oppositeValue = "this")
##           #set($codeIndentValue = "        ")
## #parse("${VMF_TEMPLATE_PATH}impl/set-opposite-via-reflection.vm")
##       });
    }
#end ## if contained
#else ## if collection
#if($prop.type)
      // property type is a model type
      if(deepCopy) {
        if(other.__vmf_prop_${prop.name}!=null) {
          this.set${prop.nameWithUpperCase}(($prop.typeName)((VCloneableInternal)other.__vmf_prop_${prop.name})._vmf_deepCopy(identityMap));
        }
      } else {
        this.__vmf_prop_$prop.name = other.__vmf_prop_$prop.name;
      }
#else ## if prop type
      // property type is an external type (TODO implement cloning strategy)
      this.set${prop.nameWithUpperCase}(other.__vmf_prop_${prop.name});
#end ## if prop type
#end ## if collection
#end ## if container type
#end ## for-each property

   } // end copy constructor

   @Override
   public ${type.implementation.typeName} _vmf_deepCopy(java.util.IdentityHashMap<Object,Object> identityMap) {
      if(identityMap.containsKey(this)) {
        return (${type.implementation.typeName})identityMap.get(this);
      } else {
        ${type.implementation.typeName} clonedVal = new ${type.implementation.typeName}(this, true, identityMap);
        return clonedVal;
      }
   }

   @Override
   public ${type.implementation.typeName} _vmf_shallowCopy(java.util.IdentityHashMap<Object,Object> identityMap) {
      if(identityMap.containsKey(this)) {
        return (${type.implementation.typeName})identityMap.get(this);
      } else {
        ${type.implementation.typeName} clonedVal = new ${type.implementation.typeName}(this, false, identityMap);
        return clonedVal;
      }
   }
#if(${type.isCloneMethodDelegated()})
  // -> clone() method is delegated
#else## #if(${type.isCloneMethodDelegated()})
  @Override
  public ${type.implementation.typeName} clone() /*throws CloneNotSupportedException*/ {
    // http://stackoverflow.com/questions/12886036/deep-copying-a-graph-structure
    // http://softwareengineering.stackexchange.com/questions/228848/how-does-java-handle-cyclic-data-references-when-serializing-an-object
    // https://gist.github.com/kanrourou/47223bdaf481505d4c7e
    // http://www.programcreek.com/2012/12/leetcode-clone-graph-java/
    java.util.IdentityHashMap<Object,Object> identityMap =
      new java.util.IdentityHashMap<>();
    return _vmf_deepCopy(identityMap);
  }
#end## #if(${type.isCloneMethodDelegated()})
  // ---------------------------- END CLONING ------------------------------