#*
 * Copyright 2017-2019 Michael Hoffer <info@michaelhoffer.de>. All rights reserved.
 * Copyright 2017-2019 Goethe Center for Scientific Computing, University Frankfurt. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * If you use this software for scientific research then please cite the following publication(s):
 *
 * M. Hoffer, C. Poliwoda, & G. Wittum. (2013). Visual reflection library:
 * a framework for declarative GUI programming on the Java platform.
 * Computing and Visualization in Science, 2013, 16(4),
 * 181â€“192. http://doi.org/10.1007/s00791-014-0230-y
 *#
## Used Variables:
##
## objectToAddReferenceOnValue
## referenceToAddValue
## referenceToRemoveValue
## objectToRemoveReferenceOnValue
## codeIndentValue
#if($prop.type||$prop.genericType)
#if(${referenceToAddValue})
// TODO 17.02.2019 feature deactivated due to huge memory consumption
// ${codeIndentValue}if(${referenceToAddValue}!=null && ${objectToAddReferenceOnValue}!=null) {
//  ${codeIndentValue}((${VMFPKG_INT}.VObjectInternal)${objectToAddReferenceOnValue})._vmf_references().add(${referenceToAddValue});
//  ${codeIndentValue}((${VMFPKG_INT}.VObjectInternal)${referenceToAddValue})._vmf_referencedBy().add(${objectToAddReferenceOnValue});
// ${codeIndentValue}}
#end##end if $referenceToAdd!=null

#if(${referenceToRemoveValue})
// TODO 17.02.2019 feature deactivated due to huge memory consumption
// ${codeIndentValue}if(${referenceToRemoveValue}!=null && ${objectToRemoveReferenceOnValue}!=null) {
//  ${codeIndentValue}((${VMFPKG_INT}.VObjectInternal)${objectToRemoveReferenceOnValue})._vmf_references().add(${referenceToRemoveValue});
//  ${codeIndentValue}((${VMFPKG_INT}.VObjectInternal)${referenceToRemoveValue})._vmf_referencedBy().add(${objectToRemoveReferenceOnValue});
// ${codeIndentValue}}
#end##end if $referenceToRemoveValue!=null
#end## if is modelType
