#*
 * Copyright 2017-2019 Michael Hoffer <info@michaelhoffer.de>. All rights reserved.
 * Copyright 2017-2019 Goethe Center for Scientific Computing, University Frankfurt. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * If you use this software for scientific research then please cite the following publication(s):
 *
 * M. Hoffer, C. Poliwoda, & G. Wittum. (2013). Visual reflection library:
 * a framework for declarative GUI programming on the Java platform.
 * Computing and Visualization in Science, 2013, 16(4),
 * 181â€“192. http://doi.org/10.1007/s00791-014-0230-y
 *#
#foreach( $prop in ${type.implementation.properties} )

#if(${prop.crossRefProperty} && ${prop.propType} == "COLLECTION")
  @Override
  public ${prop.getterDeclaration} {
    if(this.__vmf_prop_$prop.name==null) {
      this.__vmf_prop_$prop.name = ${VCOLL_PKG}.VList.newInstance(__vmf_get_prop_${prop.name}__vmf_RawList());

#if(${prop.referenceInfo.opposite.propType} == "COLLECTION" )
      this.__vmf_prop_${prop.name}.addChangeListener( (evt) -> {
            
            if(${VMFPKG_INT}.ChangeInternal.isCrossRefChange(evt)) {
              return;
            }

            evt.added().elements().forEach( (e) -> {
              if(e==null) return;

#set($oppositeRefProp=${prop.referenceInfo.opposite})

              // ${prop.referenceInfo.opposite.propType}
              // java.util.List<${oppositeRefProp.genericTypeName}> oppositeRefList = 
              //  ((${prop.parent.packageName}.impl.__VMF_TYPE_${prop.genericTypeName}Impl)e).__vmf_get_prop_${oppositeRefProp.name}__vmf_RawList();
              // oppositeRefList.add(this);  
              String eventInfo = ((${prop.parent.packageName}.impl.__VMF_TYPE_${prop.genericTypeName}Impl)e).get${prop.referenceInfo.opposite.nameWithUpperCase}().getEventInfo();
              ((${prop.parent.packageName}.impl.__VMF_TYPE_${prop.genericTypeName}Impl)e).get${prop.referenceInfo.opposite.nameWithUpperCase}().setEventInfo(${VMFPKG_INT}.ChangeInternal.CHANGE_TYPE_CROSS_REF);
              ((${prop.parent.packageName}.impl.__VMF_TYPE_${prop.genericTypeName}Impl)e).get${prop.referenceInfo.opposite.nameWithUpperCase}().add(this);
              ((${prop.parent.packageName}.impl.__VMF_TYPE_${prop.genericTypeName}Impl)e).get${prop.referenceInfo.opposite.nameWithUpperCase}().setEventInfo(eventInfo); 

#set($objectToAddReferenceOnValue="this")
#set($referenceToAddValue = "e")
#set($objectToRemoveReferenceOnValue = false)
#set($referenceToRemoveValue = false)
#set($codeIndentValue = "                ")
#parse("${VMF_TEMPLATE_PATH}impl/set-references.vm")
            }); // end of evt.added()

            evt.removed().elements().forEach( (e) -> {
              if(e==null) return;

#set($oppositeRefProp=${prop.referenceInfo.opposite})
              // ${prop.referenceInfo.opposite.propType}
              // java.util.List<${oppositeRefProp.genericTypeName}> oppositeRefList = 
              //  ((${prop.parent.packageName}.impl.__VMF_TYPE_${prop.genericTypeName}Impl)e).__vmf_get_prop_${oppositeRefProp.name}__vmf_RawList();
              // oppositeRefList.remove(this);   
              String eventInfo = ((${prop.parent.packageName}.impl.__VMF_TYPE_${prop.genericTypeName}Impl)e).get${prop.referenceInfo.opposite.nameWithUpperCase}().getEventInfo();
              ((${prop.parent.packageName}.impl.__VMF_TYPE_${prop.genericTypeName}Impl)e).get${prop.referenceInfo.opposite.nameWithUpperCase}().setEventInfo(${VMFPKG_INT}.ChangeInternal.CHANGE_TYPE_CROSS_REF);
              ((${prop.parent.packageName}.impl.__VMF_TYPE_${prop.genericTypeName}Impl)e).get${prop.referenceInfo.opposite.nameWithUpperCase}().remove(this);
              ((${prop.parent.packageName}.impl.__VMF_TYPE_${prop.genericTypeName}Impl)e).get${prop.referenceInfo.opposite.nameWithUpperCase}().setEventInfo(eventInfo); 

#set($objectToAddReferenceOnValue=false)
#set($referenceToAddValue = false)
#set($objectToRemoveReferenceOnValue = "this")
#set($referenceToRemoveValue = "e")
#set($codeIndentValue = "                ")
#parse("${VMF_TEMPLATE_PATH}impl/set-references.vm")
            }); // end of evt.removed()
      });

#elseif(${prop.referenceInfo.opposite.propType} != "COLLECTION" )
         this.__vmf_prop_${prop.name}.addChangeListener( (evt) -> {
            evt.added().elements().forEach( (e) -> {
              if(e==null) return;

              // only look for duplicates if not triggered by cross-ref
              if (!java.util.Objects.equals(${VMFPKG_INT}.ChangeInternal.CHANGE_TYPE_CROSS_REF, this.__vmf_prop_${prop.name}.getEventInfo())) {
                // we remove entry e if it is already referenced 
                // to detect we don't directly count the number of elements (must be < 2)
                // but first check whether the new opposite is equal to the previous one
                // which indicates that e has been added already
                if(this==((${prop.parent.packageName}.impl.__VMF_TYPE_${prop.genericTypeName}Impl)e).get${prop.referenceInfo.opposite.nameWithUpperCase}()) {
                  if(this.__vmf_prop_${prop.name}.stream().filter(el->el==e).count() > 1) this.__vmf_prop_${prop.name}.remove(e); // removed e since it has been already added
                  // this.__vmf_get_prop_${prop.name}__vmf_RawList().remove(e); // removed e since it has been already added
                }
              }

#set($oppositeRefProp=${prop.referenceInfo.opposite})
              // ${prop.referenceInfo.opposite.propType}
                Object refOldVal = ((${prop.parent.packageName}.impl.__VMF_TYPE_${prop.genericTypeName}Impl)e).__vmf_get_prop_${oppositeRefProp.name}();
                ((${prop.parent.packageName}.impl.__VMF_TYPE_${prop.genericTypeName}Impl)e).__vmf_set_prop_${oppositeRefProp.name}(this);
                ((${prop.parent.packageName}.impl.__VMF_TYPE_${prop.genericTypeName}Impl)e)._vmf_firePropertyChangeIfListenersArePresent("${oppositeRefProp.name}", refOldVal, this, ${VMFPKG_INT}.ChangeInternal.CHANGE_TYPE_CROSS_REF);

#set($objectToAddReferenceOnValue="this")
#set($referenceToAddValue = "e")
#set($objectToRemoveReferenceOnValue = false)
#set($referenceToRemoveValue = false)
#set($codeIndentValue = "                ")
#parse("${VMF_TEMPLATE_PATH}impl/set-references.vm")
            }); // end of evt.added()

            evt.removed().elements().forEach( (e) -> {
              if(e==null) return;

#set($oppositeRefProp=${prop.referenceInfo.opposite})
              // ${prop.referenceInfo.opposite.propType}
                Object refOldVal = ((${prop.parent.packageName}.impl.__VMF_TYPE_${prop.genericTypeName}Impl)e).__vmf_get_prop_${oppositeRefProp.name}();
                ((${prop.parent.packageName}.impl.__VMF_TYPE_${prop.genericTypeName}Impl)e).__vmf_set_prop_${oppositeRefProp.name}(null);   
                ((${prop.parent.packageName}.impl.__VMF_TYPE_${prop.genericTypeName}Impl)e)._vmf_firePropertyChangeIfListenersArePresent("${oppositeRefProp.name}", refOldVal, null, ${VMFPKG_INT}.ChangeInternal.CHANGE_TYPE_CROSS_REF);

#set($objectToAddReferenceOnValue=false)
#set($referenceToAddValue = false)
#set($objectToRemoveReferenceOnValue = "this")
#set($referenceToRemoveValue = "e")
#set($codeIndentValue = "                ")
#parse("${VMF_TEMPLATE_PATH}impl/set-references.vm")
            }); // end of evt.removed()
        });
#end## collection type  

    } // end lazy-init  
    
    return this.__vmf_prop_$prop.name;
  }  
#else## cross-ref prop
  @Override
  public $prop.getterDeclaration {
#if($prop.containmentProperty && $prop.propType == "COLLECTION" && !${prop.containmentInfo.withoutOpposite})

    if(this.__vmf_prop_$prop.name==null) {
      this.__vmf_prop_$prop.name = ${VCOLL_PKG}.VList.newInstance(new java.util.ArrayList<>());

      this.__vmf_prop_${prop.name}.addChangeListener( (evt) -> {
            evt.added().elements().forEach( (e) -> {

                if(e==null) return;

                // remove element from previous collection
                // TODO use bulk operations if possible
                if(e.get${prop.containmentInfo.opposite.nameWithUpperCase}()!=null) {
                  e.get${prop.containmentInfo.opposite.nameWithUpperCase}().get${prop.nameWithUpperCase}().remove(e);
                }
                
#parse("${VMF_TEMPLATE_PATH}impl/remove-containment-opposites-collection.vm")

                #set($propertyToModifyValue = "e")
                #set($oppositeValue = "this")
                #set($codeIndentValue = "                ")
                #set($disableFireEventValue=false)
#parse("${VMF_TEMPLATE_PATH}impl/set-opposite-via-reflection.vm")


#set($objectToAddReferenceOnValue="this")
#set($referenceToAddValue = "e")
#set($objectToRemoveReferenceOnValue = false)
#set($referenceToRemoveValue = false)
#set($codeIndentValue = "                ")
#parse("${VMF_TEMPLATE_PATH}impl/set-references.vm")
            }); // end of evt.added()

            evt.removed().elements().forEach( (e) -> {
              if(e==null) return;
                #set($propertyToModifyValue = "e")
                #set($oppositeValue = "null")
                #set($codeIndentValue = "                ")
                #set($disableFireEventValue=false)
#parse("${VMF_TEMPLATE_PATH}impl/set-opposite-via-reflection.vm")

#set($objectToAddReferenceOnValue=false)
#set($referenceToAddValue = false)
#set($objectToRemoveReferenceOnValue = "this")
#set($referenceToRemoveValue = "e")
#set($codeIndentValue = "                ")
#parse("${VMF_TEMPLATE_PATH}impl/set-references.vm")
            }); // end of evt.removed()
            
        }); // end of change listener

    } // end of "lazy init" if(this.__vmf_prop_$prop.name==null)

    return this.__vmf_prop_$prop.name;

    // return VContainmentUtil.asContainmentList(this.__vmf_prop_$prop.name, "__vmf_prop_${prop.containmentInfo.opposite.name}");
#elseif($prop.containmentProperty && $prop.propType == "COLLECTION" && ${prop.containmentInfo.withoutOpposite})
    if(this.__vmf_prop_$prop.name==null) {
      this.__vmf_prop_$prop.name = ${VCOLL_PKG}.VList.newInstance(new java.util.ArrayList<>());

      this.__vmf_prop_${prop.name}.addChangeListener( (evt) -> {
            evt.added().elements().forEach( (e) -> {

                if(e==null) return;

#parse("${VMF_TEMPLATE_PATH}impl/remove-containment-opposites-collection.vm")   

${VMFPKG_INT}.VObjectInternalModifiable valueInternal = (${VMFPKG_INT}.VObjectInternalModifiable)e;
valueInternal._vmf_setContainer(this);

##       // for-loop <begin>
##       { // scope <begin>
##       // release from old container & set new container
##       //${VMFPKG_INT}.VObjectInternalModifiable valueInternal = (${VMFPKG_INT}.VObjectInternalModifiable)e;
##       boolean done = false;
      
## #foreach($pOfType in ${prop.genericType.findAllPropsThatContainType()})## // for-loop <begin>
##       // PROP: ${pOfType.parent.typeName}.${pOfType.name}
## #if(!${pOfType.equals(${prop})})##---- if (prop!=pOfType)
##       if(!done && valueInternal._vmf_getContainer() instanceof ${pOfType.parent.typeName}) {
## #else##--------------------------------## else (prop!=pOfType)  
##       // -> prop is identical to this prop. only remove if container instance is different from
##       //    'this' reference
##       if(!done && valueInternal._vmf_getContainer()!=this && valueInternal._vmf_getContainer() instanceof ${pOfType.parent.typeName}) {
## #end##---------------------------------## end (prop!=pOfType)      
##         ${pOfType.parent.typeName} container = (${pOfType.parent.typeName})valueInternal._vmf_getContainer();
## #if(${pOfType.propType}=="COLLECTION")## if    (is collection-type)
##         container.get${pOfType.nameWithUpperCase}().remove(valueInternal);
## #else##---------------------------------## else  (is collection-type)
##         container.set${pOfType.nameWithUpperCase}(null);
## #end##----------------------------------## end   (is collection-type)
##         done = true;
##       }
## #end##------------------------------------------------------------ // for-loop <end>
## //      valueInternal._vmf_setContainer(this);
##       } // scope <end>
##       // for-loop <end>
      
      

##                // remove element from previous collection
##                // TODO use bulk operations if possible
##                if(e.get${prop.containmentInfo.opposite.nameWithUpperCase}()!=null) {
##                  e.get${prop.containmentInfo.opposite.nameWithUpperCase}().get${prop.nameWithUpperCase}().remove(e);
##                }
##
##                 #set($propertyToModifyValue = "e")
##                 #set($oppositeValue = "this")
##                 #set($codeIndentValue = "                ")
##                 #set($disableFireEventValue=false)
## #parse("${VMF_TEMPLATE_PATH}impl/set-opposite-via-reflection.vm")

#set($objectToAddReferenceOnValue="this")
#set($referenceToAddValue = "e")
#set($objectToRemoveReferenceOnValue = false)
#set($referenceToRemoveValue = false)
#set($codeIndentValue = "                ")
#parse("${VMF_TEMPLATE_PATH}impl/set-references.vm")
            }); // end of evt.added()

            evt.removed().elements().forEach( (e) -> {
              if(e==null) return;

      // release this container
      ${VMFPKG_INT}.VObjectInternalModifiable oldValueInternal = (${VMFPKG_INT}.VObjectInternalModifiable)e;
      oldValueInternal._vmf_setContainer(null);


##                 #set($propertyToModifyValue = "e")
##                 #set($oppositeValue = "null")
##                 #set($codeIndentValue = "                ")
##                 #set($disableFireEventValue=false)
## #parse("${VMF_TEMPLATE_PATH}impl/set-opposite-via-reflection.vm")

#set($objectToAddReferenceOnValue=false)
#set($referenceToAddValue = false)
#set($objectToRemoveReferenceOnValue = "this")
#set($referenceToRemoveValue = "e")
#set($codeIndentValue = "                ")
#parse("${VMF_TEMPLATE_PATH}impl/set-references.vm")
            }); // end of evt.removed()
            
        }); // end of change listener

    } // end of "lazy init" if(this.__vmf_prop_$prop.name==null)

    return this.__vmf_prop_$prop.name;
#else
#if($prop.propType == "COLLECTION")
    if(this.__vmf_prop_$prop.name==null) {
      this.__vmf_prop_$prop.name = ${VCOLL_PKG}.VList.newInstance(new java.util.ArrayList<>());
#if($prop.type||$prop.genericType)
      this.__vmf_prop_${prop.name}.addChangeListener( (evt) -> {
            evt.added().elements().forEach( (e) -> {
              // nothing to do if e == null
              if(e==null) return;
#set($objectToAddReferenceOnValue="this")
#set($referenceToAddValue = "e")
#set($objectToRemoveReferenceOnValue = false)
#set($referenceToRemoveValue = false)
                #set($codeIndentValue = "                ")
#parse("${VMF_TEMPLATE_PATH}impl/set-references.vm")
            }); // end of evt.added()

            evt.removed().elements().forEach( (e) -> {
              // nothing to do if e == null
              if(e==null) return;
#set($objectToAddReferenceOnValue=false)
#set($referenceToAddValue = false)
#set($objectToRemoveReferenceOnValue = "this")
#set($referenceToRemoveValue = "e")
#set($codeIndentValue = "                ")
#parse("${VMF_TEMPLATE_PATH}impl/set-references.vm")
            }); // end of evt.removed()

        }); // end of change listener
#end## if is model type
    } // end of "lazy init" if(this.__vmf_prop_$prop.name==null)
#end
    return this.__vmf_prop_$prop.name;

#end
  } // end of $prop.getterDeclaration
#end## not cross-ref prop   
#end## foreach prop
