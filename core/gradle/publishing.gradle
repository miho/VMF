// -----------------------------------------------------------------------------
// Collect publishing information
// -----------------------------------------------------------------------------
ext.publishingInfo = [:]

ext.publishingInfo.pomName =  ext.publishingInfo.artifactId

apply from: "gradle/project-info.gradle"
apply plugin: 'signing'

// This replaces the old manual `javadocJar` and `sourcesJar` tasks.
java {
    withJavadocJar()
    withSourcesJar()
}

// REMOVED: The old manual tasks for javadocJar, sourcesJar, and the `artifacts {}`
// block are no longer needed with the modern `java` component configuration above.

publishing {
    publications {
        mavenJava(MavenPublication) {
            // Read basic coordinates from your project-info.gradle
            groupId publishingInfo.groupId
            artifactId publishingInfo.artifactId
            version publishingInfo.versionId

            // Tell Gradle to publish the components of the 'java' project.
            // This automatically includes the main JAR, sources JAR, and javadoc JAR.
            from components.java

            // NEW: Modern POM configuration using the standard DSL.
            // This is much cleaner than the old `pom.withXml` and `pomConfig` closure.
            pom {
                name = publishingInfo.pomName
                description = publishingInfo.desc
                url = publishingInfo.websiteUrl
                inceptionYear = publishingInfo.inceptionYear

                licenses {
                    license {
                        name = publishingInfo.license
                        url = publishingInfo.licenseUrl
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = publishingInfo.developerAlias
                        name = publishingInfo.developerName
                        email = publishingInfo.developerEmail
                    }
                }
                scm {
                    url = publishingInfo.vcsUrl
                    connection = publishingInfo.vcsUrl
                    developerConnection = publishingInfo.vcsUrl
                }
            }
        }
    }

    repositories {
        // Your GitHub Packages repository can remain as is
        maven {
            name = "GitHubPackages"
            url = uri(project.findProperty('publishingInfo').gitHubMavenRepo)
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }

        // --------------------------------------------------------------------------------
        // Destination Repository 'MavenCentral'
        // Publishes artifacts to the new Sonatype Central Portal staging repository.
        // -> Call task 'publishMavenJavaPublicationToMavenCentralRepository' to publish.
        // -> Visit https://central.sonatype.com/staging, close the repository, then release it if closing was s
        // --------------------------------------------------------------------------------
//        maven {
//            name = "MavenCentral" // Renamed from "OSSRH" for clarity
//            // The new URL for the Central Portal Staging API
//            // Defines the URLs for both repositories (snapshot vs. regular)
//            def releasesRepoUrl = url   = "https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2/"
//            def snapshotsRepoUrl = url  = "https://central.sonatype.com/repository/maven-snapshots/"
//
//            // Select the URL based on the version
//            url = uri(publishingInfo.versionId.endsWith('-SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl)
//
//            credentials {
//                // Use the new User Token credentials from central.sonatype.com
//                username = project.findProperty("mavenCentralUsername") ?: System.getenv("CENTRAL_PORTAL_USERNAME")
//                password = project.findProperty("mavenCentralPassword") ?: System.getenv("CENTRAL_PORTAL_PWD")
//            }
//
//
//        }
        maven {
            name = "MavenCentral"

            def releasesRepoUrl  = "https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://central.sonatype.com/repository/maven-snapshots/"

            url = uri(publishingInfo.versionId.endsWith('-SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl)

            credentials {
                username = project.findProperty("mavenCentralUsername") ?: System.getenv("CENTRAL_PORTAL_USERNAME")
                password = project.findProperty("mavenCentralPassword") ?: System.getenv("CENTRAL_PORTAL_PWD")
            }
        }


        // --------------------------------------------------------------------------------
        // Destination Repository 'BuildDir'
        // telling gradle to publish artifact to local directory
        // -> call task 'publishMavenJavaPublicationToBuildDirRepository' to publish
        // --------------------------------------------------------------------------------
        maven {
            name = "BuildDir"
            url = uri("${buildDir}/artifacts").toURL()
        }
    }
//    publications {
//        mavenJava(MavenPublication) {
//            groupId publishingInfo.groupId
//            artifactId publishingInfo.artifactId
//            version publishingInfo.versionId
//            from components.java
//            artifact sourcesJar
//            artifact javadocJar
//
//            pom.withXml {
//                def root = asNode()
//                root.appendNode 'description', publishingInfo.desc
//                root.children().last() + pomConfig
//            }
//        }
//    }
}

if(
        project.findProperty("signing.secretKeyRingFile")
                && project.findProperty("signing.password")
                && project.findProperty("signing.keyId")
) {

    signing {
        sign publishing.publications
    }

} else {
    println "> skipping signing, provide\n" +
            "  - 'signing.secretKeyRingFile'\n" +
            "  - 'signing.password'\n" +
            "  - 'signing.keyId'\n" +
            " to activate it\n"
}


tasks.register('releaseToCentralPortal') {
    group = 'publishing'
    description = 'Hands off the last non-SNAPSHOT upload to the Central Portal so it appears under Deployments.'

    doLast {
        if (publishingInfo.versionId.endsWith('-SNAPSHOT')) {
            println "Version '${publishingInfo.versionId}' is a SNAPSHOT. Skipping Portal hand-off."
            return
        }

        if (!project.hasProperty('sonatypeNamespace')) {
            throw new InvalidUserDataException("Provide -PsonatypeNamespace=your.namespace")
        }
        if (!project.hasProperty('mavenCentralUsername') || !project.hasProperty('mavenCentralPassword')) {
            throw new InvalidUserDataException("Missing Central Portal token username/password.")
        }

        def sonatypeNamespace = project.property('sonatypeNamespace')
        def username = project.property('mavenCentralUsername')
        def token    = project.property('mavenCentralPassword')
        def publishingType = (project.findProperty('publishingType') ?: 'user_managed') as String

        // Optional fallback: pass -PrepositoryKey=<key> to hand off a specific repo
        def repositoryKey = project.findProperty('repositoryKey') as String

        String apiUrl = repositoryKey ?
                "https://ossrh-staging-api.central.sonatype.com/manual/upload/repository/${repositoryKey}?publishing_type=${publishingType}" :
                "https://ossrh-staging-api.central.sonatype.com/manual/upload/defaultRepository/${sonatypeNamespace}?publishing_type=${publishingType}"

        println "--> Handing off ${repositoryKey ? "repositoryKey=${repositoryKey}" : "namespace=${sonatypeNamespace}"} to Central (publishing_type=${publishingType})..."

        HttpURLConnection connection = (HttpURLConnection) new URL(apiUrl).openConnection()
        try {
            def bearer = "${username}:${token}".bytes.encodeBase64().toString()
            connection.setRequestProperty('Authorization', "Bearer ${bearer}") // Bearer + base64(user:pass)
            connection.requestMethod = 'POST'
            connection.connectTimeout = 60_000
            connection.readTimeout    = 300_000

            def code = connection.responseCode
            def body = (code >= 400 ? connection.errorStream : connection.inputStream)?.getText('UTF-8')
            println "HTTP ${code} ${connection.responseMessage}"
            if (body) println "Response:\n${body}"
            if (code >= 400) throw new GradleException("Portal hand-off failed with HTTP ${code}")
        } finally {
            connection.disconnect()
        }

        println "\nSuccess. Check https://central.sonatype.com/publishing/deployments"
    }
}

