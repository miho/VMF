/*
 * Copyright 2017-2023 Michael Hoffer <info@michaelhoffer.de>. All rights reserved.
 * Copyright 2017-2023 Goethe Center for Scientific Computing, University Frankfurt. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * If you use this software for scientific research then please cite the following publication(s):
 *
 * M. Hoffer, C. Poliwoda, & G. Wittum. (2013). Visual reflection library:
 * a framework for declarative GUI programming on the Java platform.
 * Computing and Visualization in Science, 2013, 16(4),
 * 181â€“192. http://doi.org/10.1007/s00791-014-0230-y
 */
package eu.mihosoft.vmf.runtime.core.internal;

import eu.mihosoft.vcollections.VListChangeEvent;
import eu.mihosoft.vmf.runtime.core.Change;
import vjavax.observer.collection.CollectionChangeEvent;

/**
 * For internal use by the VMF framework. Do not rely on this API. Seriously, don't rely on it.
 * It might change without prior notice.
 **/  
@Deprecated
public interface ChangeInternal extends Change {

  static final String CHANGE_TYPE_CROSS_REF   = "vmf:change:type:crossref";
  static final String CHANGE_TYPE_CONTAINMENT = "vmf:change:type:containment";
  static final String CHANGE_TYPE_EMPTY       = "";

  /**
   * A string that indicates additional information, such as events generated by cross-ref etc.
   */
  String getInternalChangeInfo();

  /**
   * Indicates whether the specified change is only a crossref change, i.e, triggered by setting the opposite
   * of the cross ref.
   * @param c change to check
   * @return {@code true} if the specified change is triggered by setting the opposite; {@code false} otherwise
   */
  static boolean isCrossRefChange(Change c) {
    if(c instanceof ChangeInternal) {
      String changeInfo = ((ChangeInternal)c).getInternalChangeInfo();

      return CHANGE_TYPE_CROSS_REF.equals(changeInfo);
    }

    return false;
  }

    /**
   * Indicates whether the specified change is only a crossref list change, i.e, triggered by setting the opposite
   * of the cross ref.
   * @param c change to check
   * @return {@code true} if the specified change is triggered by setting the opposite; {@code false} otherwise
   */
  static boolean isCrossRefChange(CollectionChangeEvent c) {

    return CHANGE_TYPE_CROSS_REF.equals(c.eventInfo());
  }
}